\documentclass[11pt]{article}
%Gummi|061|=)

\usepackage{xcolor}
\usepackage{listings}

\title{\textbf{A report on\linebreak Minimalistic Kernel development in C} }
\author{ 		
        {Prepared by : Amit Tomar}\\
        		\vspace{ 2 mm}\\		
		\textbf{Team} \\	
				\vspace{ -4 mm}\\					
		amit.tomar \\
		(MT2013008) \\
		\vspace{ -3 mm}\\		
		ashutosh.vyas\\								     
		(MT2013031) \\		
				\vspace{ -3 mm}\\					
		pankajkumar.aggarwal\\
		(MT2013096) \\
				\vspace{ -3 mm}\\		
		rakesh.rajpurohit\\
		(MT2013122) \\
						\vspace{ -2 mm}\\		
		\textbf{@iiitb.org}}
		
\date{20 - Dec - 2013 \vspace {45 mm} \footnote{A lot of the material in this document has been taken from several resources available over the internet. It was difficult to give exact citations, thus we have given topic wise references  at the end of this document. Permission through e-mail was taken from two authors whose work appears majorly in this document. This document shall be treated more as a collection of tutorial than as an original work of the authors.}}

\begin{document}

\maketitle

\vspace {85 mm}

\section{Problem Statement}

This project aims at developing an absolute minimal Kernel, to understand the basic functionality of how Kernels are developed, build, linked and loaded into the memory. We have explored how drivers are written by writing minimal driver for video display manipulation. We have further explored how interrupts are handled and developed a programmable interval timer based on it. Overall work involved was as follows :

\begin{enumerate}

\item Development of a Kernel entry point in ASM.

 \item Development of a bare minimal custom Kernel in C language.

 \item Understanding the build process of this Kernel.
 
 \item Linking this kernel with the startup script.

 \item Using GRUB, booting up and loading of this Kernel on a CPU emulator/virtual machine.

 \item Write a display driver which is capable of performing the following functionality :
 
 	\begin{enumerate}

		 \item Writing characters on the screen.
	
		 \item Clearing screen.
	
		 \item Scrolling the screen.
	
		 \item Moving the cursor.	
		 
	\end{enumerate}  
	
	\item Handling of the various interrupts generated in the system by calling the respective Interrupt Service Routines.
	
	\item Development of a programmable interval timer which can be asked to generate timer interrupts at the user defined intervals.

\end{enumerate}

\section{The boot process}

To boot up an Operating System, another piece of software is required which can 'boot strap' itself and then load the Operating System, further passing control to it. This is called the bootloader. We have used the Bootloader known as GRUB (a Multiboot compliant boot loader) . It puts the system in to the correct state for your kernel to start executing. This includes enabling the A20 line (to give you access to all available memory addresses) and putting the system in to 32-bit Protected Mode.  We have used a kernel executable in ELF format, so that we have control to tell GRUB where to load which part in memory.

\vspace{ 3 mm} 

\noindent \textbf{Booting the Operating System}

\vspace{ 3 mm} 

\noindent The first task we will deal with is how the bootloader starts the kernel. Multiboot Standard for Kernels describes an easy interface between the bootloader and the operating system kernel. It works by putting a few magic values in some global variables (known as a multiboot header), which is searched for by the bootloader. When it sees these values, it recognizes the kernel as multiboot compatible and it knows how to load us, and it can even forward us important information such as memory maps etc to the kernel. 

\vspace{ 3 mm} 

\noindent \textbf{Master Boot Record}

\vspace{ 3 mm} 

\noindent A device is said to be "bootable" if it carries a boot sector with the byte sequence 0x55, 0xAA in bytes 511 and 512 respectively. When the BIOS finds such a boot sector, it is loaded into memory at a specific location; this is usually 0x0000:0x7c00 (segment 0, address 0x7c00). 

\vspace{ 3 mm} 

\noindent \textbf{Linking the Kernel}

\vspace{ 3 mm} 

\noindent We have to assemble the boot assembly file and compile the main kernel c file. This produces two object files that each contain part of the kernel. To create the full and final kernel we will have to link these object files into the final kernel program, usable by the bootloader. 

\section {Handling Interrupts} 

An interrupt is a signal to the processor emitted by hardware or software indicating an event that needs immediate attention. An interrupt alerts the processor to a high-priority condition requiring the interruption of the current code the processor is executing, the current thread. The processor responds by suspending its current activities, saving its state, and executing a small program called an interrupt handler (or interrupt service routine, ISR) to deal with the event. This interruption is temporary, and after the interrupt handler finishes, the processor resumes execution of the previous thread.

\noindent \textbf{The Interrupt Descriptor Table}

\vspace{ 3 mm}

\noindent The IDT is a descriptor table which provides information about several interrupt and how they are to be handled. Interrupt means stoping the processor from what it is doing currently, and pass on the control to some other entity, and then return back to the original execution on completion of the generated Interrupt. eg. Timer, Keyboard interrupt requests. The processor return to the code that was running before it stopped to handle an interrupt. Interrupts can be fired externally, via IRQs, or internally, via the 'int n' instruction. 

\vspace{ 2 mm}

The Interrupt Descriptor Table tells the processor where to find handlers for each interrupt. It is just an array of entries, each one corresponding to an interrupt number. There are 256 possible interrupt numbers, so 256 entried must be defined. If an interrupt occurs and there is no entry for it, the processor will panic and reset.

\vspace{ 3 mm}

\noindent \textbf{Faults, traps and exceptions}

\vspace{ 3 mm}

\noindent An Exception is a special case that the processor encounters when it cannot continue normal execution. This could be something like dividing by zero: The result is an unknown or non-real number, so the processor will cause an exception so that the kernel can stop that process or task from causing any problems. If the processor finds that a program is trying to access a piece of memory that it shouldn't, it will cause a General Protection Fault. For this purpose the first 32 interrupts aew reserved. If a mapping for these is not privided CPU will triple-fault and reset. When the processor receives an interrupt, it saves the contents of the essential registers (instruction pointer, stack pointer, code and data segments, flags register) to the stack. It then finds the interrupt handler location from our IDT and jumps to it.

\vspace {3 mm}

\noindent Following are the special interrupt for CPU

 	\begin{enumerate}

\item Division by zero exception
\item Debug exception
\item Non maskable interrupt
\item Breakpoint exception
\item Into detected overflow
\item Out of bounds exception
\item Invalid opcode exception
\item No coprocessor exception
\item Double fault (pushes an error code)
\item Coprocessor segment overrun
\item Bad TSS (pushes an error code)
\item Segment not present (pushes an error code)
\item Stack fault (pushes an error code)
\item General protection fault (pushes an error code)
\item Page fault (pushes an error code)
\item Unknown interrupt exception
\item Coprocessor fault
\item Alignment check exception
\item Machine check exception
\item 19-31 - Reserved

 	\end{enumerate}

\vspace {3mm}
\noindent \textbf{Interrupt Service Routines}
\vspace {3mm}

\noindent Interrupt Service Routines, or ISRs, are used to save the current processor state and set up the appropriate segment registers needed for kernel mode before the kernel's C-level interrupt handler is called. The first 32 entries in the IDT correspond to Exceptions that can possibly be generated by the processor, and therefore need to be handled. Some exceptions will push another value onto the stack: an Error Code value which is specific to the exception caused.

\section{The Screen}

Monitors can display both text and graphics and have different techniques and memory requirements for each. Consequently, video adapters have two display modes: text and graphics. In text mode, the screen is divided into columns and rows, typically 80 columns by 25 rows, and a character is displayed at each screen position (character cell). In graphics mode, the screen is again divided into columns and rows, and each screen position is called a pixel (short for picture element). A picture can be displayed by specifying the color of each pixel on the screen.

\vspace {2mm}

Kernel gets booted by GRUB in text mode. That is, it has available to it a framebuffer that controls a screen of characters (\textbf{not pixels}) 80 wide by 25 high. This area of memory known as the framebuffer is accessible just like normal RAM, at address 0xB8000. It is important to note, however, that it is not actually normal RAM.

\vspace {3mm}
\noindent \textbf{Text Mode Programming}
\vspace {3mm}

\noindent Positions on the screen are referenced using (column, row) coordinates. The upper left corner has coordinates (0,0). For an 80 x 25 display, the rows are 0-24 and the columns are 0-79.

\vspace{ 3 mm}

\noindent Table of some 80 x 25 screen positions

\vspace{ 3 mm}

\begin{tabular}{l*{6}{c}r}
Position              & Decimal & Hexadecimal \\
\hline
Upper  Left Corner & (0,0) & (0,0) \\
Lower  Left Corner & (0,24) & (0,18) \\
Upper  Left Corner & (79,0)  & (4F,0) \\
Lower  Left Corner & (79,24) & (4F,18)  \\
Center Screen      & (39,12) & (27,C)

\end{tabular}

\vspace{ 5 mm}

\noindent The character displayed at a screen position is specified by the contents of a WORD in the display memory. The low byte of the word contains the character's ASCII code; the high byte contains its attribute, which tells how the character will be displayed (its color, whether it's blinking, underlined, and so on).

\vspace{ 3 mm}

\noindent \textbf{ The Attribute Byte}

\vspace{ 3 mm}

\noindent The high byte of the word that specifies a display character is called the attribute byte. It describes the color and intensity of the character, the background color, and whether the character is blinking and/or underlined.

\vspace{ 3 mm}

\noindent 16-Color Display Attribute Byte:

\vspace{ 3 mm}

Bit\#	7	6	5	4	3	2	1	0
\vspace{ 1 mm}

Attr	BL	R	G	B	IN	R	G	B

\vspace{ 1 mm}

Attributes:

\noindent \textbf{Bit} \#    \textbf{Attribute}

\noindent 0-2      character color (foreground color)


\noindent 3        intensity 


\noindent 4-6      background color


\noindent 7        blinking

\vspace{2mm}

\noindent E.g., to display a red character on a blue background, the attribute byte would be: 0001 0100 = 14h

\vspace{3mm}

\noindent If the attribute byte is: 0011 0101 = 35h, it uses blue + green (cyan) in the background and red+blue (magenta) in the foreground, so the character displayed would be magenta on a cyan background. If the intensity bit (bit 3) is 1, the foreground color is lightened (brightened). If the blinking bit (bit 7) is 1, the character turns on and off.

\section {The Keyboard}

A scancode is simply a key number. The keyboard assigns a number to each key on the keyboard; this is your scancode. The scancodes are numbered generally from top to bottom and left to right, with some minor exceptions to keep layouts backwards compatible with older keyboards. You must use a lookup table (an array of values) and use the scancode as the index into this table. The lookup table is called a keymap, and will be used to translate scancodes into ASCII values rather quickly and painlessly. If bit 7 is set (test with 'scancode \& 0x80'), then this is the keyboard's way of telling us that a key was just released.

\vspace{3mm}

The keyboard is attached to the computer through a special microcontroller chip on your mainboard. This keyboard controller chip has 2 channels: one for the keyboard, and one for the mouse. Also note that it is through this keyboard controller chip that you would enable the A20 address line on the processor to allow you to access memory past the 1MByte mark (GRUB enables this, you don't need to worry about it). The keyboard controller, being a device accessible by the system, has an address on the I/O bus that we can use for access and control. The keyboard controller has 2 main registers: a Data register at 0x60, and a Control register at 0x64. Anything that the keyboard wants to send the computer is stored into the Data register. The keyboard will raise IRQ1 whenever it has data for us to read. Observe:

\section { Interrupt requests }

Interrupt Requests or IRQs are interrupts that are raised by hardware devices. Some devices generate an IRQ when they have data ready to be read, or when they finish a command like writing a buffer to disk, for example. It's safe to say that a device will generate an IRQ whenever it wants the processor's attention. 

\vspace{3mm}

Normally PCs have 2 chips that are used to manage IRQs. These 2 chips are known as the Programmable Interrupt Controllers or PICs. One acts as the 'Master' IRQ controller, and one is the 'Slave' IRQ controller. The slave is connected to IRQ2 on the master controller. The master IRQ controller is connected directly to the processor itself, to send signals. Each PIC can handle 8 IRQs. The master PIC handles IRQs 0 to 7, and the slave PIC handles IRQs 8 to 15. Remember that the slave controller is connected to the primary controller through IRQ2: This means that every time an IRQ from 8 to 15 occurs, IRQ2 fires at exactly the same time.

\vspace{3mm}

When a device signals an IRQ, an interrupt is generated, and the CPU pauses whatever it's doing to call the ISR to handle the corresponding IRQ. The CPU then performs whatever necessary action (like reading from the keyboard, for example), and then it must tell the PIC that the interrupt came from that the CPU has finished executing the correct routine. The CPU tells the right PIC that the interrupt is complete by writing the command byte 0x20 in hex to the command register for that PIC. The master PIC's command register exists at I/O port 0x20, while the slave PIC's command register exists at I/O port 0xA0.

\vspace{3mm}

IRQ0 to IRQ7 are originally mapped to IDT entries 8 through 15. IRQ8 to IRQ15 are mapped to IDT entries 0x70 through 0x78. IDT entries 0 through 31 are reserved for exceptions. Interrupt Controllers are however 'programmable': You can change what IDT entries that their IRQs are mapped to. For this project, we have mapped IRQ0 through IRQ15 to IDT entries 32 through 47.

\section {The programmable Interval timer}

The Programmable Interval Timer also called the System Clock, is a very useful chip for accurately generating interrupts at regular time intervals. The chip itself has 3 channels: Channel 0 is tied to is tied to IRQ0, to interrupt the CPU at predictable and regular times, Channel 1 is system specific, and Channel 2 is connected to the system speaker. By default, channel 0 of the timer is set to generate an IRQ0 18.222 times per second. 

\vspace{3mm}

To set the rate at which channel 0 of the timer fires off an IRQ0, we must use our outportb function to write to I/O ports. There is a Data register for each of the timer's 3 channels at 0x40, 0x41, and 0x42 respectively, and a Command register at 0x43. The data rate is actually a 'divisor' register for this device. The timer will divide it's input clock of 1.19MHz (1193180Hz) by the number you give it in the data register to figure out how many times per second to fire the signal for that channel. You must first select the channel that we want to update using the command register before writing to the data/divisor register. 

\section{Installing BOCHS}
 
Go to the official sourceforge page of BOCHS and download the latest rpm package available there :
 
\begin{lstlisting}
 
http://sourceforge.net/projects/bochs/files/bochs/

\end{lstlisting}

\vspace {3mm}

\noindent
Ubuntu distro doesnt support rpm package installation directly, you can use the utility called alien to convert it into deb package : 
\begin{lstlisting}

# sudo apt-get install alien
# sudo alien -k your_rpm_package.rpm

\end{lstlisting}

\vspace {3mm}

\noindent
Then right click and open the obtained deb package using the software centre provided by ubuntu to install the package.

\section {Limitations}

1. All the keys on keyboard are not handled. Keyboard lights, right hand side keys etc are not handled.

\vspace {2mm}

\noindent 2. When an exception is raised, system halts completely. Not able to recover from the exception.

\section{References}
 
 Following sources were referred before writing this documents to get the basic understanding of Kernel development process and approximate time it might require:
 
\vspace {5 mm}
 
\textbf{ General references about operating systems and LaTeX}
 
 \begin{enumerate}
 
 \item  {http://wiki.osdev.org/Bare\_Bones}
 
 \item  {http://wiki.osdev.org/Category:Babystep}
 
  \item    {http://www.osdever.net/bkerndev/index.php}
  
  \item    {http://www.osdever.net/tutorials/pdf/getting\_started.pdf}
  
  \item    {http://www.osdever.net/tutorials/pdf/comparison.pdf}
 
  \item    {http://www.jamesmolloy.co.uk/index.html} 
 
  \item    {http://www.nondot.org/sabre/os/articles} 
  
  \item    {http://www.wikihow.com/Make-a-Computer-Operating-System} 
  
  \item    {http://forums.devshed.com/c-programming-42/i-ve-written-a-small-os-kernel-and-i-have-388986.html}
   
  \item    {http://gusc.lv/2012/11/im-writing-my-own-os/} 
    
  \item    {http://www.brokenthorn.com/Resources/OSDev2.html} 
  
  \item   {http://joelgompert.com/OS/TableOfContents.htm}
  
  \item   {http://stackoverflow.com/questions/2195908/latex-multiple-linebreaks}
  
  \item  {http://techfreaks4u.com/blog/posts/kernel-development-from-scratch/}
  
  \item {http://wiki.osdev.org/Tutorials}
  
  \item  {http://tex.stackexchange.com/questions/81834/whats-the-best-way-to-typeset-c-codes-in-latex}
  
  \item  {http://stackoverflow.com/questions/741985/latex-source-code-listing-like-in-professional-books}
  
  \item  {http://www.personal.ceu.hu/tex/breaking.htm}
      
  \item  {http://en.wikibooks.org/wiki/LaTeX/Source-Code-Listings}
  
    \item {http://tex.stackexchange.com/questions/38829/remove-paragraph-indentation}
  
  \vspace {3 mm}
  
  \textbf{ References about the operating system boot process  }    
  
  \item  {http://www.cs.rutgers.edu/~pxk/416/notes/02-boot.html}
  
  \item  {http://en.wikipedia.org/wiki/Booting}
  
  \item  {http://www.tldp.org/LDP/intro-linux/html/sect\_04\_02.html}
  
  \item  {http://www.thegeekstuff.com/2011/02/linux-boot-process/}
  
  \item  {http://sansbound.com/2012/08/understanding-the-boot-process-charles-joseph/}
  
  \item  {http://kevinboone.net/boot.html}
  
  \item  {http://www.osdever.net/tutorials/pdf/bootsector\_hd.pdf}
  
  \item  {http://www.osdever.net/tutorials/brunmar/tutorial\_01.php}
  
  \vspace {3 mm}
  
  \textbf{ References about BOCHS  }    
  
  \item  {http://bochs.sourceforge.net/doc/docbook/user/bochsrc.html}  
  
  \item  {http://bochs.sourceforge.net/ }
  
  \item  {http://manpages.ubuntu.com/manpages/dapper/man5/bochsrc.5.html}
  
  \item  {  http://en.wikipedia.org/wiki/Bochs }
  
  \item  {  http://sourceforge.net/projects/bochs/files/bochs/2.6.2/ }
  
  \item  {  http://joeyh.name/code/alien/ }
  
  \vspace {3 mm}
  
  \textbf{ References about Makefiles and linker scripts }    
  
  
  \item  {http://www.cs.duke.edu/courses/cps108/doc/makefileinfo/sample.html}
  
  \item  {http://stackoverflow.com/questions/3220277/what-do-the-makefile-symbols-and-mean}
  
  \item {http://www.gnu.org/software/make/manual/html\_node/Automatic-Variables.html}
  
  \item  {https://www.gnu.org/software/make/manual/html\_node/Catalogue-of-Rules.html}
  
  \item  {http://www.delorie.com/gnu/docs/binutils/ld\_6.html}
 
 \vspace {3 mm}
  
  \textbf{ Mount and loop devices }
 
  \item  {http://en.wikipedia.org/wiki/Loop\_device}
  
  \item  {http://www.linuxcommand.org/man\_pages/losetup8.html}
  
   \vspace {3 mm}
  
  \textbf{ Bootloaders, custom boot and GRUB in particular }
  
  \item {http://wiki.osdev.org/Boot\_Sequence}
  
  \item  {http://wiki.osdev.org/Diskless\_Booting}
  
  \item  {http://www.osdever.net/tutorials/grub.php}
  
  \item  {http://wiki.osdev.org/PS2\_Keyboard}
  
  \item {http://www.gnu.org/software/grub/manual/grub.html\#Embedded-data}
  
  \item {http://www.linuxquestions.org/questions/linux-general-1/how-to-export-customized-linux-os-to-usb-bootable-pendrive-4175443832/}
  
  \item  {http://rudd-o.com/linux-and-free-software/a-better-way-to-create-a-customized-ubuntu-live-usb-drive}
  
  \item  {https://help.ubuntu.com/community/BootFromUSB}
  
  \item  {http://workingdirectory.net/posts/2009/grub-on-usb/}
  
   \vspace {3 mm}
  
  \textbf{ Writing to the Video device }
  
  \item  {http://wiki.osdev.org/Printing\_to\_Screen}
  
  \item  {http://www.osdev.org/howtos/2/\#related}
  
  \item  {http://bytes.com/topic/c/answers/621381-plz-explain-outportb-function}
  
  \item  {http://wiki.osdev.org/Text\_Mode\_Cursor}  
  
  \item  {http://wiki.osdev.org/Memory\_Map\_(x86)\#BIO\_Data\_Area\_.28BDA.29}
  
  \item  {http://www.codeproject.com/Articles/39069/Beginning-Operating-System-Development-Part-Two}
  
  \item  {http://fleder44.net/312/notes/18Graphics/index.html}
  
  \item  {http://en.wikipedia.org/wiki/Text\_mode}

      \vspace {3 mm}
  
  \textbf{ Keyboard }  
  
  \item  {http://www.brokenthorn.com/Resources/OSDev19.html}
  
    \vspace {3 mm}
  
  \textbf{ Miscellaneous topics }
  
  \item  {http://www.cs.umd.edu/class/sum2003/cmsc311/Notes/BitOp/bitshift.html}  
  
  \item  {http://wiki.osdev.org/A20\_Line}
  
  \item  {http://www.muppetlabs.com/~breadbox/software/tiny/teensy.html}
  
  \item  {http://stackoverflow.com/questions/2427011/what-is-the-difference-between-elf-files-and-bin-files}
  
  \item  {http://wiki.osdev.org/8259\_PIC}
  
  \item  {http://forum.osdev.org/viewtopic.php?f=1\&t=23473}
  
  \item  {http://stackoverflow.com/questions/4584089/assembler-push-pop-registers}
  
 \item   {http://wiki.answers.com/Q/What\_are\_segment\_registers}
 
 \item   {http://reverseengineering.stackexchange.com/questions/2006/how-are-the-segment-registers-fs-gs-cs-ss-ds-es-used-in-i386-and-amd64}
 
 \item  {http://stackoverflow.com/questions/9580383/gcc-fno-stack-protector-option}
 
 \item  {http://stackoverflow.com/questions/16879434/why-do-these-c-struct-definitions-give-warnings-and-errors}
 
 \item  {http://www.eecg.toronto.edu/~amza/www.mindsec.com/files/x86regs.html}
 
 \item  {http://wiki.osdev.org/PIC}
 
 \item  {http://reverseengineering.stackexchange.com/questions/2006/how-are-the-segment-registers-fs-gs-cs-ss-ds-es-used-in-i386-and-amd64}
 
 \item  {http://stackoverflow.com/questions/10810203/what-is-the-fs-gs-register-intended-for}
 
 \item  {http://wiki.osdev.org/Stack}
 
 

      \vspace {3 mm}
  
  \textbf{ Interrupt Descriptor table }
  

  
  \item  {http://wiki.osdev.org/Interrupt\_Descriptor\_Table}
  
      \vspace {3 mm}
  
  \textbf{ Assembly }
  
  \item  {http://www.cs.virginia.edu/~evans/cs216/guides/x86.html}
  
  \item  {http://en.wikipedia.org/wiki/JMP\_(x86\_instruction)}
  
  \item  {http://tigcc.ticalc.org/doc/gnuasm.html}
  
  \item  {http://www.tldp.org/HOWTO/html\_single/Assembly-HOWTO/}
 
 \item  {http://docs.cs.up.ac.za/programming/asm/derick\_tut/}
 
 \item  {http://www.plantation-productions.com/Webster/}
  
        \vspace {3 mm}
  
  \textbf{ Intel i386 Reference Manuals }
  
  \item  {http://www.intel.com/content/dam/www/public/us/en/documents/manuals/64-ia-32-architectures-software-developer-manual-325462.pdf}
 
 \end{enumerate} 

\end{document}
